{"version":3,"sources":["component/SearchContent/reducer.js","component/SearchContent/SearchContent.jsx","customHooks/index.js","pages/index.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchContext","React","createContext","state","dispatch","reducer","action","type","id","value","newState","Object","keys","forEach","element","Array","isArray","Error","Option","RangePicker","InputWithLabel","label","inputConfig","useContext","onChange","useCallback","e","target","useInput","className","style","width","textAlign","marginRight","allowClear","SelectWithLabel","option","selectConfig","useSelect","map","item","key","SearchButtonWithLabel","buttonConfig","request","setResult","useState","search","setSearch","useEffect","then","res","onClick","useSearchButton","ResetButtonWithLabel","useResetButton","DateWithLabel","dateConfig","date","dateString","useDate","showTime","format","SearchContent","list","useReducer","Provider","gutter","span","offset","Index","params","req","result","useSearchContent","Promise","resolve","success","useMemo","data","searchContentProps","margin","background","padding","JSON","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfae6047.chunk.js","sourcesContent":["import React from \"react\";\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"update\":\r\n      return { ...state, [action.id]: action.value };\r\n    case \"reset\":\r\n      let newState = {};\r\n      Object.keys(state).forEach(element => {\r\n        if (Array.isArray(state[element])) {\r\n          newState[element] = [];\r\n        } else {\r\n          newState[element] = null;\r\n        }\r\n      });\r\n      return newState;\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\nexport const SearchContext = React.createContext({\r\n  state: {},\r\n  dispatch: () => {}\r\n});\r\nexport default reducer;\r\n","import React, { useReducer } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input, Select, Button, DatePicker, Row, Col } from \"antd\";\r\nimport {\r\n  useInput,\r\n  useSelect,\r\n  useSearchButton,\r\n  useResetButton,\r\n  useDate\r\n} from \"../../customHooks/index.js\";\r\nimport reducer, { SearchContext } from \"./reducer\";\r\nimport \"./SearchContent.less\";\r\n\r\nconst { Option } = Select;\r\nconst { RangePicker } = DatePicker;\r\n\r\nfunction InputWithLabel({ label, id }) {\r\n  const inputConfig = useInput(id);\r\n  return (\r\n    <div className=\"search-item\">\r\n      <div style={{ width: \"70px\", textAlign: \"right\", marginRight: \"0.7em\" }}>\r\n        {label}:{\" \"}\r\n      </div>\r\n      <Input {...inputConfig} allowClear className=\"search-input\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SelectWithLabel({ label, id, option }) {\r\n  const selectConfig = useSelect(id);\r\n  return (\r\n    <div className=\"search-item\">\r\n      <div style={{ width: \"70px\", textAlign: \"right\", marginRight: \"0.7em\" }}>\r\n        {label}:{\" \"}\r\n      </div>\r\n      <Select {...selectConfig} className=\"search-input\" allowClear>\r\n        {option.map(item => (\r\n          <Option key={item.key}>{item.value}</Option>\r\n        ))}\r\n      </Select>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SearchButtonWithLabel({ request, setResult }) {\r\n  const buttonConfig = useSearchButton(request, setResult);\r\n  return (\r\n    <Button {...buttonConfig} type=\"primary\">\r\n      查询\r\n    </Button>\r\n  );\r\n}\r\n\r\nfunction ResetButtonWithLabel() {\r\n  const buttonConfig = useResetButton();\r\n  return <Button {...buttonConfig}>重置</Button>;\r\n}\r\n\r\nfunction DateWithLabel({ label, id }) {\r\n  const dateConfig = useDate(id);\r\n  return (\r\n    <div className=\"search-item\">\r\n      <div style={{ width: \"70px\", textAlign: \"right\", marginRight: \"0.7em\" }}>\r\n        {label}:{\" \"}\r\n      </div>\r\n      <RangePicker\r\n        showTime={{ format: \"HH:mm\" }}\r\n        format=\"YYYY-MM-DD HH:mm\"\r\n        {...dateConfig}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SearchContent({ request, list, setResult }) {\r\n  const [state, dispatch] = useReducer(reducer, {});\r\n  return (\r\n    <SearchContext.Provider value={{ state, dispatch }}>\r\n      <Row gutter={[16, 24]}>\r\n        {list.map(item => {\r\n          switch (item.type) {\r\n            case \"input\":\r\n              return (\r\n                <Col key={item.id} span={8}>\r\n                  <InputWithLabel id={item.id} label={item.label} />\r\n                </Col>\r\n              );\r\n            case \"select\":\r\n              return (\r\n                <Col key={item.id} span={8}>\r\n                  <SelectWithLabel\r\n                    id={item.id}\r\n                    label={item.label}\r\n                    option={item.option}\r\n                  />\r\n                </Col>\r\n              );\r\n            case \"date\":\r\n              return (\r\n                <Col key={item.id} span={8}>\r\n                  <DateWithLabel id={item.id} label={item.label} />\r\n                </Col>\r\n              );\r\n            default:\r\n              return null;\r\n          }\r\n        })}\r\n        <Col span={4} offset={4}>\r\n          <div className=\"search-button-group\">\r\n            <SearchButtonWithLabel\r\n              label={\"search\"}\r\n              request={request}\r\n              setResult={setResult}\r\n            />\r\n            <ResetButtonWithLabel label={\"reset\"} />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </SearchContext.Provider>\r\n  );\r\n}\r\nSearchContent.propTypes = {\r\n  request: PropTypes.func.isRequired,\r\n  list: PropTypes.arrayOf(function(\r\n    propValue,\r\n    key,\r\n    componentName,\r\n    location,\r\n    propFullName\r\n  ) {\r\n    if (\r\n      propValue[key].hasOwnProperty(\"id\") &&\r\n      propValue[key].hasOwnProperty(\"label\") &&\r\n      propValue[key].hasOwnProperty(\"type\")\r\n    ) {\r\n    } else {\r\n      return new Error(\"请检查list参数的每一项的id，label，type是否存在\");\r\n    }\r\n  })\r\n};\r\n\r\nexport default SearchContent;\r\nexport { useSearchContent } from \"../../customHooks/index.js\";\r\n","import { useContext, useState, useCallback, useEffect } from \"react\";\r\nimport { SearchContext } from \"../component/SearchContent/reducer\";\r\n\r\nexport function useInput(id) {\r\n  const { state, dispatch } = useContext(SearchContext);\r\n  const onChange = useCallback(\r\n    e => {\r\n      dispatch({ type: \"update\", id, value: e.target.value });\r\n    },\r\n    [dispatch, id]\r\n  );\r\n  return { value: state[id], onChange };\r\n}\r\n\r\nexport function useSelect(id) {\r\n  const { state, dispatch } = useContext(SearchContext);\r\n  const onChange = useCallback(\r\n    value => {\r\n      dispatch({ type: \"update\", id, value });\r\n    },\r\n    [dispatch, id]\r\n  );\r\n  return { value: state[id], onChange };\r\n}\r\n\r\nexport function useSearchButton(request, setResult) {\r\n  const { state } = useContext(SearchContext);\r\n  const [search, setSearch] = useState();\r\n  useEffect(() => {\r\n    request(search).then(res => {\r\n      setResult(res);\r\n    });\r\n  }, [search, request, setResult]);\r\n  const onClick = useCallback(() => {\r\n    setSearch(state);\r\n  }, [state]);\r\n  return { onClick };\r\n}\r\n\r\nexport function useResetButton() {\r\n  const { dispatch } = useContext(SearchContext);\r\n  const onClick = useCallback(() => {\r\n    dispatch({ type: \"reset\" });\r\n  }, [dispatch]);\r\n  return { onClick };\r\n}\r\n\r\nexport function useDate(id) {\r\n  const { state, dispatch } = useContext(SearchContext);\r\n  const onChange = useCallback(\r\n    (date, dateString) => {\r\n      dispatch({ type: \"update\", id, value: date });\r\n    },\r\n    [dispatch, id]\r\n  );\r\n  return { value: state[id], onChange };\r\n}\r\n\r\nexport function useSearchContent(req, list) {\r\n  const [result, setResult] = useState();\r\n  const request = useCallback(req, []);\r\n  return [result, { request, list, setResult }];\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport SearchContent, {\r\n  useSearchContent\r\n} from \"../component/SearchContent/SearchContent\";\r\nfunction Index(params) {\r\n  const list = useMemo(\r\n    () => [\r\n      { type: \"input\", label: \"姓名\", id: \"name\" },\r\n      { type: \"input\", label: \"年龄\", id: \"age\" },\r\n      { type: \"input\", label: \"身高\", id: \"height\" },\r\n      {\r\n        type: \"select\",\r\n        label: \"select\",\r\n        id: \"sheight\",\r\n        option: [\r\n          { key: \"1\", value: 1 },\r\n          { key: \"2\", value: 2 },\r\n          { key: \"3\", value: 3 }\r\n        ]\r\n      },\r\n      { type: \"date\", label: \"time\", id: \"time\" }\r\n    ],\r\n    []\r\n  );\r\n  function fetchData(params) {\r\n    return Promise.resolve({ success: true });\r\n  }\r\n\r\n  const [data, searchContentProps] = useSearchContent(fetchData, list);\r\n  return (\r\n    <section\r\n      style={{\r\n        width: \"1100px\",\r\n        margin: \"20px auto\",\r\n        background: \"#fff\",\r\n        padding: \"20px\"\r\n      }}\r\n    >\r\n      <SearchContent {...searchContentProps} />\r\n      {data && JSON.stringify(data)}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Index;\r\n","import React from \"react\";\nimport Index from \"../src/pages/index.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Index />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}